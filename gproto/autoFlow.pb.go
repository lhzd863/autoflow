// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.3
// source: autoFlow.proto

// 定义包名

package gproto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 定义 Req 消息结构
type Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 类型 字段 = 标识号
	JsonStr string `protobuf:"bytes,1,opt,name=JsonStr,proto3" json:"JsonStr,omitempty"`
}

func (x *Req) Reset() {
	*x = Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autoFlow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_autoFlow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_autoFlow_proto_rawDescGZIP(), []int{0}
}

func (x *Req) GetJsonStr() string {
	if x != nil {
		return x.JsonStr
	}
	return ""
}

// 定义 Res 消息结构
type Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status_Txt  string `protobuf:"bytes,1,opt,name=Status_Txt,json=StatusTxt,proto3" json:"Status_Txt,omitempty"`
	Status_Code int32  `protobuf:"varint,2,opt,name=Status_Code,json=StatusCode,proto3" json:"Status_Code,omitempty"`
	Data        string `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *Res) Reset() {
	*x = Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_autoFlow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res) ProtoMessage() {}

func (x *Res) ProtoReflect() protoreflect.Message {
	mi := &file_autoFlow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res.ProtoReflect.Descriptor instead.
func (*Res) Descriptor() ([]byte, []int) {
	return file_autoFlow_proto_rawDescGZIP(), []int{1}
}

func (x *Res) GetStatus_Txt() string {
	if x != nil {
		return x.Status_Txt
	}
	return ""
}

func (x *Res) GetStatus_Code() int32 {
	if x != nil {
		return x.Status_Code
	}
	return 0
}

func (x *Res) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_autoFlow_proto protoreflect.FileDescriptor

var file_autoFlow_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x22, 0x59, 0x0a, 0x03, 0x52, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x54, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x78, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x32, 0xea, 0x04, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x07, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x27, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x0b, 0x4a,
	0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x72, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71,
	0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x26, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x0b, 0x2e, 0x67, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x2c, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x41, 0x64, 0x64, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71,
	0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x2c, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x53, 0x75,
	0x62, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b,
	0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2d, 0x0a,
	0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e,
	0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0a,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x15, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x12,
	0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x16, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x32, 0xd2, 0x01, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x26, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0b, 0x2e, 0x67,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x6f, 0x70, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71,
	0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x27, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x2e, 0x67,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x45,
	0x78, 0x65, 0x63, 0x4c, 0x6f, 0x67, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_autoFlow_proto_rawDescOnce sync.Once
	file_autoFlow_proto_rawDescData = file_autoFlow_proto_rawDesc
)

func file_autoFlow_proto_rawDescGZIP() []byte {
	file_autoFlow_proto_rawDescOnce.Do(func() {
		file_autoFlow_proto_rawDescData = protoimpl.X.CompressGZIP(file_autoFlow_proto_rawDescData)
	})
	return file_autoFlow_proto_rawDescData
}

var file_autoFlow_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_autoFlow_proto_goTypes = []interface{}{
	(*Req)(nil), // 0: gproto.Req
	(*Res)(nil), // 1: gproto.Res
}
var file_autoFlow_proto_depIdxs = []int32{
	0,  // 0: gproto.Leader.Ping:input_type -> gproto.Req
	0,  // 1: gproto.Leader.JobStart:input_type -> gproto.Req
	0,  // 2: gproto.Leader.JobStop:input_type -> gproto.Req
	0,  // 3: gproto.Leader.JobStatus:input_type -> gproto.Req
	0,  // 4: gproto.Leader.JobExecuter:input_type -> gproto.Req
	0,  // 5: gproto.Leader.FlowStart:input_type -> gproto.Req
	0,  // 6: gproto.Leader.FlowStop:input_type -> gproto.Req
	0,  // 7: gproto.Leader.FlowStatus:input_type -> gproto.Req
	0,  // 8: gproto.Leader.FlowRoutineAdd:input_type -> gproto.Req
	0,  // 9: gproto.Leader.FlowRoutineSub:input_type -> gproto.Req
	0,  // 10: gproto.Leader.FlowRoutineList:input_type -> gproto.Req
	0,  // 11: gproto.Leader.FlowCreate:input_type -> gproto.Req
	0,  // 12: gproto.Leader.LeaderFlowRoutineStop:input_type -> gproto.Req
	0,  // 13: gproto.Leader.LeaderFlowRoutineStart:input_type -> gproto.Req
	0,  // 14: gproto.Worker.Ping:input_type -> gproto.Req
	0,  // 15: gproto.Worker.JobStart:input_type -> gproto.Req
	0,  // 16: gproto.Worker.JobStop:input_type -> gproto.Req
	0,  // 17: gproto.Worker.JobStatus:input_type -> gproto.Req
	0,  // 18: gproto.Worker.JobExecLog:input_type -> gproto.Req
	1,  // 19: gproto.Leader.Ping:output_type -> gproto.Res
	1,  // 20: gproto.Leader.JobStart:output_type -> gproto.Res
	1,  // 21: gproto.Leader.JobStop:output_type -> gproto.Res
	1,  // 22: gproto.Leader.JobStatus:output_type -> gproto.Res
	1,  // 23: gproto.Leader.JobExecuter:output_type -> gproto.Res
	1,  // 24: gproto.Leader.FlowStart:output_type -> gproto.Res
	1,  // 25: gproto.Leader.FlowStop:output_type -> gproto.Res
	1,  // 26: gproto.Leader.FlowStatus:output_type -> gproto.Res
	1,  // 27: gproto.Leader.FlowRoutineAdd:output_type -> gproto.Res
	1,  // 28: gproto.Leader.FlowRoutineSub:output_type -> gproto.Res
	1,  // 29: gproto.Leader.FlowRoutineList:output_type -> gproto.Res
	1,  // 30: gproto.Leader.FlowCreate:output_type -> gproto.Res
	1,  // 31: gproto.Leader.LeaderFlowRoutineStop:output_type -> gproto.Res
	1,  // 32: gproto.Leader.LeaderFlowRoutineStart:output_type -> gproto.Res
	1,  // 33: gproto.Worker.Ping:output_type -> gproto.Res
	1,  // 34: gproto.Worker.JobStart:output_type -> gproto.Res
	1,  // 35: gproto.Worker.JobStop:output_type -> gproto.Res
	1,  // 36: gproto.Worker.JobStatus:output_type -> gproto.Res
	1,  // 37: gproto.Worker.JobExecLog:output_type -> gproto.Res
	19, // [19:38] is the sub-list for method output_type
	0,  // [0:19] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_autoFlow_proto_init() }
func file_autoFlow_proto_init() {
	if File_autoFlow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_autoFlow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_autoFlow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_autoFlow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_autoFlow_proto_goTypes,
		DependencyIndexes: file_autoFlow_proto_depIdxs,
		MessageInfos:      file_autoFlow_proto_msgTypes,
	}.Build()
	File_autoFlow_proto = out.File
	file_autoFlow_proto_rawDesc = nil
	file_autoFlow_proto_goTypes = nil
	file_autoFlow_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LeaderClient is the client API for Leader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LeaderClient interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobStatus(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobExecuter(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	FlowStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	FlowStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	FlowStatus(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	FlowRoutineAdd(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	FlowRoutineSub(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	FlowRoutineList(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	FlowCreate(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	LeaderFlowRoutineStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	LeaderFlowRoutineStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type leaderClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderClient(cc grpc.ClientConnInterface) LeaderClient {
	return &leaderClient{cc}
}

func (c *leaderClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Leader/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) JobStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Leader/JobStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) JobStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Leader/JobStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) JobStatus(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Leader/JobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) JobExecuter(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Leader/JobExecuter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) FlowStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Leader/FlowStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) FlowStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Leader/FlowStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) FlowStatus(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Leader/FlowStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) FlowRoutineAdd(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Leader/FlowRoutineAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) FlowRoutineSub(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Leader/FlowRoutineSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) FlowRoutineList(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Leader/FlowRoutineList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) FlowCreate(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Leader/FlowCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) LeaderFlowRoutineStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Leader/LeaderFlowRoutineStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderClient) LeaderFlowRoutineStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Leader/LeaderFlowRoutineStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderServer is the server API for Leader service.
type LeaderServer interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	Ping(context.Context, *Req) (*Res, error)
	JobStart(context.Context, *Req) (*Res, error)
	JobStop(context.Context, *Req) (*Res, error)
	JobStatus(context.Context, *Req) (*Res, error)
	JobExecuter(context.Context, *Req) (*Res, error)
	FlowStart(context.Context, *Req) (*Res, error)
	FlowStop(context.Context, *Req) (*Res, error)
	FlowStatus(context.Context, *Req) (*Res, error)
	FlowRoutineAdd(context.Context, *Req) (*Res, error)
	FlowRoutineSub(context.Context, *Req) (*Res, error)
	FlowRoutineList(context.Context, *Req) (*Res, error)
	FlowCreate(context.Context, *Req) (*Res, error)
	LeaderFlowRoutineStop(context.Context, *Req) (*Res, error)
	LeaderFlowRoutineStart(context.Context, *Req) (*Res, error)
}

// UnimplementedLeaderServer can be embedded to have forward compatible implementations.
type UnimplementedLeaderServer struct {
}

func (*UnimplementedLeaderServer) Ping(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedLeaderServer) JobStart(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStart not implemented")
}
func (*UnimplementedLeaderServer) JobStop(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStop not implemented")
}
func (*UnimplementedLeaderServer) JobStatus(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStatus not implemented")
}
func (*UnimplementedLeaderServer) JobExecuter(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobExecuter not implemented")
}
func (*UnimplementedLeaderServer) FlowStart(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowStart not implemented")
}
func (*UnimplementedLeaderServer) FlowStop(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowStop not implemented")
}
func (*UnimplementedLeaderServer) FlowStatus(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowStatus not implemented")
}
func (*UnimplementedLeaderServer) FlowRoutineAdd(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowRoutineAdd not implemented")
}
func (*UnimplementedLeaderServer) FlowRoutineSub(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowRoutineSub not implemented")
}
func (*UnimplementedLeaderServer) FlowRoutineList(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowRoutineList not implemented")
}
func (*UnimplementedLeaderServer) FlowCreate(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowCreate not implemented")
}
func (*UnimplementedLeaderServer) LeaderFlowRoutineStop(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderFlowRoutineStop not implemented")
}
func (*UnimplementedLeaderServer) LeaderFlowRoutineStart(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderFlowRoutineStart not implemented")
}

func RegisterLeaderServer(s *grpc.Server, srv LeaderServer) {
	s.RegisterService(&_Leader_serviceDesc, srv)
}

func _Leader_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Leader/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_JobStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).JobStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Leader/JobStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).JobStart(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_JobStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).JobStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Leader/JobStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).JobStop(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_JobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).JobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Leader/JobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).JobStatus(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_JobExecuter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).JobExecuter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Leader/JobExecuter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).JobExecuter(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_FlowStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).FlowStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Leader/FlowStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).FlowStart(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_FlowStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).FlowStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Leader/FlowStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).FlowStop(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_FlowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).FlowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Leader/FlowStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).FlowStatus(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_FlowRoutineAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).FlowRoutineAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Leader/FlowRoutineAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).FlowRoutineAdd(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_FlowRoutineSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).FlowRoutineSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Leader/FlowRoutineSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).FlowRoutineSub(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_FlowRoutineList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).FlowRoutineList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Leader/FlowRoutineList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).FlowRoutineList(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_FlowCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).FlowCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Leader/FlowCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).FlowCreate(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_LeaderFlowRoutineStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).LeaderFlowRoutineStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Leader/LeaderFlowRoutineStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).LeaderFlowRoutineStop(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Leader_LeaderFlowRoutineStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServer).LeaderFlowRoutineStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Leader/LeaderFlowRoutineStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServer).LeaderFlowRoutineStart(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _Leader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gproto.Leader",
	HandlerType: (*LeaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Leader_Ping_Handler,
		},
		{
			MethodName: "JobStart",
			Handler:    _Leader_JobStart_Handler,
		},
		{
			MethodName: "JobStop",
			Handler:    _Leader_JobStop_Handler,
		},
		{
			MethodName: "JobStatus",
			Handler:    _Leader_JobStatus_Handler,
		},
		{
			MethodName: "JobExecuter",
			Handler:    _Leader_JobExecuter_Handler,
		},
		{
			MethodName: "FlowStart",
			Handler:    _Leader_FlowStart_Handler,
		},
		{
			MethodName: "FlowStop",
			Handler:    _Leader_FlowStop_Handler,
		},
		{
			MethodName: "FlowStatus",
			Handler:    _Leader_FlowStatus_Handler,
		},
		{
			MethodName: "FlowRoutineAdd",
			Handler:    _Leader_FlowRoutineAdd_Handler,
		},
		{
			MethodName: "FlowRoutineSub",
			Handler:    _Leader_FlowRoutineSub_Handler,
		},
		{
			MethodName: "FlowRoutineList",
			Handler:    _Leader_FlowRoutineList_Handler,
		},
		{
			MethodName: "FlowCreate",
			Handler:    _Leader_FlowCreate_Handler,
		},
		{
			MethodName: "LeaderFlowRoutineStop",
			Handler:    _Leader_LeaderFlowRoutineStop_Handler,
		},
		{
			MethodName: "LeaderFlowRoutineStart",
			Handler:    _Leader_LeaderFlowRoutineStart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "autoFlow.proto",
}

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerClient interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobStatus(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobExecLog(ctx context.Context, opts ...grpc.CallOption) (Worker_JobExecLogClient, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Worker/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) JobStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Worker/JobStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) JobStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Worker/JobStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) JobStatus(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Worker/JobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) JobExecLog(ctx context.Context, opts ...grpc.CallOption) (Worker_JobExecLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Worker_serviceDesc.Streams[0], "/gproto.Worker/JobExecLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerJobExecLogClient{stream}
	return x, nil
}

type Worker_JobExecLogClient interface {
	Send(*Req) error
	Recv() (*Res, error)
	grpc.ClientStream
}

type workerJobExecLogClient struct {
	grpc.ClientStream
}

func (x *workerJobExecLogClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerJobExecLogClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerServer is the server API for Worker service.
type WorkerServer interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	Ping(context.Context, *Req) (*Res, error)
	JobStart(context.Context, *Req) (*Res, error)
	JobStop(context.Context, *Req) (*Res, error)
	JobStatus(context.Context, *Req) (*Res, error)
	JobExecLog(Worker_JobExecLogServer) error
}

// UnimplementedWorkerServer can be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (*UnimplementedWorkerServer) Ping(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedWorkerServer) JobStart(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStart not implemented")
}
func (*UnimplementedWorkerServer) JobStop(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStop not implemented")
}
func (*UnimplementedWorkerServer) JobStatus(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStatus not implemented")
}
func (*UnimplementedWorkerServer) JobExecLog(Worker_JobExecLogServer) error {
	return status.Errorf(codes.Unimplemented, "method JobExecLog not implemented")
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Worker/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_JobStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).JobStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Worker/JobStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).JobStart(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_JobStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).JobStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Worker/JobStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).JobStop(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_JobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).JobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Worker/JobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).JobStatus(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_JobExecLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).JobExecLog(&workerJobExecLogServer{stream})
}

type Worker_JobExecLogServer interface {
	Send(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type workerJobExecLogServer struct {
	grpc.ServerStream
}

func (x *workerJobExecLogServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerJobExecLogServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gproto.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Worker_Ping_Handler,
		},
		{
			MethodName: "JobStart",
			Handler:    _Worker_JobStart_Handler,
		},
		{
			MethodName: "JobStop",
			Handler:    _Worker_JobStop_Handler,
		},
		{
			MethodName: "JobStatus",
			Handler:    _Worker_JobStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JobExecLog",
			Handler:       _Worker_JobExecLog_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "autoFlow.proto",
}
