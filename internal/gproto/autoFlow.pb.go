// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.3
// source: tmp/autoFlow.proto

// 定义包名

package gproto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 定义 Req 消息结构
type Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 类型 字段 = 标识号
	JsonStr string `protobuf:"bytes,1,opt,name=JsonStr,proto3" json:"JsonStr,omitempty"`
}

func (x *Req) Reset() {
	*x = Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmp_autoFlow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_tmp_autoFlow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_tmp_autoFlow_proto_rawDescGZIP(), []int{0}
}

func (x *Req) GetJsonStr() string {
	if x != nil {
		return x.JsonStr
	}
	return ""
}

// 定义 Res 消息结构
type Res struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status_Txt  string `protobuf:"bytes,1,opt,name=Status_Txt,json=StatusTxt,proto3" json:"Status_Txt,omitempty"`
	Status_Code int32  `protobuf:"varint,2,opt,name=Status_Code,json=StatusCode,proto3" json:"Status_Code,omitempty"`
	Data        string `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *Res) Reset() {
	*x = Res{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmp_autoFlow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res) ProtoMessage() {}

func (x *Res) ProtoReflect() protoreflect.Message {
	mi := &file_tmp_autoFlow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res.ProtoReflect.Descriptor instead.
func (*Res) Descriptor() ([]byte, []int) {
	return file_tmp_autoFlow_proto_rawDescGZIP(), []int{1}
}

func (x *Res) GetStatus_Txt() string {
	if x != nil {
		return x.Status_Txt
	}
	return ""
}

func (x *Res) GetStatus_Code() int32 {
	if x != nil {
		return x.Status_Code
	}
	return 0
}

func (x *Res) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_tmp_autoFlow_proto protoreflect.FileDescriptor

var file_tmp_autoFlow_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x6d, 0x70, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a, 0x03,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x22, 0x59, 0x0a,
	0x03, 0x52, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x54,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x32, 0x8d, 0x05, 0x0a, 0x0a, 0x46, 0x6c, 0x6f,
	0x77, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x6f, 0x43, 0x6d, 0x64,
	0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e,
	0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x04,
	0x50, 0x69, 0x6e, 0x67, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x26, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0b, 0x2e, 0x67,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x6f, 0x70, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71,
	0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x27, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x2e, 0x67,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x72, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e,
	0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x08,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a,
	0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2c,
	0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x41, 0x64, 0x64,
	0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e,
	0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0e,
	0x46, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x53, 0x75, 0x62, 0x12, 0x0b,
	0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0f, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0b, 0x2e,
	0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0a, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x12, 0x4d, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x13, 0x4d, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0b, 0x2e, 0x67,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x32, 0xc9, 0x01, 0x0a, 0x06, 0x53, 0x6c, 0x61,
	0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x44, 0x6f, 0x43, 0x6d, 0x64, 0x12, 0x0b, 0x2e, 0x67,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e,
	0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x08,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x70, 0x12,
	0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x09, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x67, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tmp_autoFlow_proto_rawDescOnce sync.Once
	file_tmp_autoFlow_proto_rawDescData = file_tmp_autoFlow_proto_rawDesc
)

func file_tmp_autoFlow_proto_rawDescGZIP() []byte {
	file_tmp_autoFlow_proto_rawDescOnce.Do(func() {
		file_tmp_autoFlow_proto_rawDescData = protoimpl.X.CompressGZIP(file_tmp_autoFlow_proto_rawDescData)
	})
	return file_tmp_autoFlow_proto_rawDescData
}

var file_tmp_autoFlow_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_tmp_autoFlow_proto_goTypes = []interface{}{
	(*Req)(nil), // 0: gproto.Req
	(*Res)(nil), // 1: gproto.Res
}
var file_tmp_autoFlow_proto_depIdxs = []int32{
	0,  // 0: gproto.FlowMaster.DoCmd:input_type -> gproto.Req
	0,  // 1: gproto.FlowMaster.Ping:input_type -> gproto.Req
	0,  // 2: gproto.FlowMaster.JobStart:input_type -> gproto.Req
	0,  // 3: gproto.FlowMaster.JobStop:input_type -> gproto.Req
	0,  // 4: gproto.FlowMaster.JobStatus:input_type -> gproto.Req
	0,  // 5: gproto.FlowMaster.JobExecuter:input_type -> gproto.Req
	0,  // 6: gproto.FlowMaster.FlowStart:input_type -> gproto.Req
	0,  // 7: gproto.FlowMaster.FlowStop:input_type -> gproto.Req
	0,  // 8: gproto.FlowMaster.FlowStatus:input_type -> gproto.Req
	0,  // 9: gproto.FlowMaster.FlowRoutineAdd:input_type -> gproto.Req
	0,  // 10: gproto.FlowMaster.FlowRoutineSub:input_type -> gproto.Req
	0,  // 11: gproto.FlowMaster.FlowRoutineList:input_type -> gproto.Req
	0,  // 12: gproto.FlowMaster.FlowCreate:input_type -> gproto.Req
	0,  // 13: gproto.FlowMaster.MstFlowRoutineStop:input_type -> gproto.Req
	0,  // 14: gproto.FlowMaster.MstFlowRoutineStart:input_type -> gproto.Req
	0,  // 15: gproto.Slaver.DoCmd:input_type -> gproto.Req
	0,  // 16: gproto.Slaver.Ping:input_type -> gproto.Req
	0,  // 17: gproto.Slaver.JobStart:input_type -> gproto.Req
	0,  // 18: gproto.Slaver.JobStop:input_type -> gproto.Req
	0,  // 19: gproto.Slaver.JobStatus:input_type -> gproto.Req
	1,  // 20: gproto.FlowMaster.DoCmd:output_type -> gproto.Res
	1,  // 21: gproto.FlowMaster.Ping:output_type -> gproto.Res
	1,  // 22: gproto.FlowMaster.JobStart:output_type -> gproto.Res
	1,  // 23: gproto.FlowMaster.JobStop:output_type -> gproto.Res
	1,  // 24: gproto.FlowMaster.JobStatus:output_type -> gproto.Res
	1,  // 25: gproto.FlowMaster.JobExecuter:output_type -> gproto.Res
	1,  // 26: gproto.FlowMaster.FlowStart:output_type -> gproto.Res
	1,  // 27: gproto.FlowMaster.FlowStop:output_type -> gproto.Res
	1,  // 28: gproto.FlowMaster.FlowStatus:output_type -> gproto.Res
	1,  // 29: gproto.FlowMaster.FlowRoutineAdd:output_type -> gproto.Res
	1,  // 30: gproto.FlowMaster.FlowRoutineSub:output_type -> gproto.Res
	1,  // 31: gproto.FlowMaster.FlowRoutineList:output_type -> gproto.Res
	1,  // 32: gproto.FlowMaster.FlowCreate:output_type -> gproto.Res
	1,  // 33: gproto.FlowMaster.MstFlowRoutineStop:output_type -> gproto.Res
	1,  // 34: gproto.FlowMaster.MstFlowRoutineStart:output_type -> gproto.Res
	1,  // 35: gproto.Slaver.DoCmd:output_type -> gproto.Res
	1,  // 36: gproto.Slaver.Ping:output_type -> gproto.Res
	1,  // 37: gproto.Slaver.JobStart:output_type -> gproto.Res
	1,  // 38: gproto.Slaver.JobStop:output_type -> gproto.Res
	1,  // 39: gproto.Slaver.JobStatus:output_type -> gproto.Res
	20, // [20:40] is the sub-list for method output_type
	0,  // [0:20] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_tmp_autoFlow_proto_init() }
func file_tmp_autoFlow_proto_init() {
	if File_tmp_autoFlow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tmp_autoFlow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmp_autoFlow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Res); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tmp_autoFlow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_tmp_autoFlow_proto_goTypes,
		DependencyIndexes: file_tmp_autoFlow_proto_depIdxs,
		MessageInfos:      file_tmp_autoFlow_proto_msgTypes,
	}.Build()
	File_tmp_autoFlow_proto = out.File
	file_tmp_autoFlow_proto_rawDesc = nil
	file_tmp_autoFlow_proto_goTypes = nil
	file_tmp_autoFlow_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FlowMasterClient is the client API for FlowMaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlowMasterClient interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	DoCmd(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobStatus(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobExecuter(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	FlowStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	FlowStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	FlowStatus(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	FlowRoutineAdd(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	FlowRoutineSub(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	FlowRoutineList(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	FlowCreate(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	MstFlowRoutineStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	MstFlowRoutineStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type flowMasterClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowMasterClient(cc grpc.ClientConnInterface) FlowMasterClient {
	return &flowMasterClient{cc}
}

func (c *flowMasterClient) DoCmd(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/DoCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMasterClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMasterClient) JobStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/JobStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMasterClient) JobStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/JobStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMasterClient) JobStatus(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/JobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMasterClient) JobExecuter(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/JobExecuter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMasterClient) FlowStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/FlowStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMasterClient) FlowStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/FlowStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMasterClient) FlowStatus(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/FlowStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMasterClient) FlowRoutineAdd(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/FlowRoutineAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMasterClient) FlowRoutineSub(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/FlowRoutineSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMasterClient) FlowRoutineList(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/FlowRoutineList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMasterClient) FlowCreate(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/FlowCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMasterClient) MstFlowRoutineStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/MstFlowRoutineStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowMasterClient) MstFlowRoutineStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.FlowMaster/MstFlowRoutineStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowMasterServer is the server API for FlowMaster service.
type FlowMasterServer interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	DoCmd(context.Context, *Req) (*Res, error)
	Ping(context.Context, *Req) (*Res, error)
	JobStart(context.Context, *Req) (*Res, error)
	JobStop(context.Context, *Req) (*Res, error)
	JobStatus(context.Context, *Req) (*Res, error)
	JobExecuter(context.Context, *Req) (*Res, error)
	FlowStart(context.Context, *Req) (*Res, error)
	FlowStop(context.Context, *Req) (*Res, error)
	FlowStatus(context.Context, *Req) (*Res, error)
	FlowRoutineAdd(context.Context, *Req) (*Res, error)
	FlowRoutineSub(context.Context, *Req) (*Res, error)
	FlowRoutineList(context.Context, *Req) (*Res, error)
	FlowCreate(context.Context, *Req) (*Res, error)
	MstFlowRoutineStop(context.Context, *Req) (*Res, error)
	MstFlowRoutineStart(context.Context, *Req) (*Res, error)
}

// UnimplementedFlowMasterServer can be embedded to have forward compatible implementations.
type UnimplementedFlowMasterServer struct {
}

func (*UnimplementedFlowMasterServer) DoCmd(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCmd not implemented")
}
func (*UnimplementedFlowMasterServer) Ping(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedFlowMasterServer) JobStart(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStart not implemented")
}
func (*UnimplementedFlowMasterServer) JobStop(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStop not implemented")
}
func (*UnimplementedFlowMasterServer) JobStatus(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStatus not implemented")
}
func (*UnimplementedFlowMasterServer) JobExecuter(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobExecuter not implemented")
}
func (*UnimplementedFlowMasterServer) FlowStart(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowStart not implemented")
}
func (*UnimplementedFlowMasterServer) FlowStop(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowStop not implemented")
}
func (*UnimplementedFlowMasterServer) FlowStatus(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowStatus not implemented")
}
func (*UnimplementedFlowMasterServer) FlowRoutineAdd(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowRoutineAdd not implemented")
}
func (*UnimplementedFlowMasterServer) FlowRoutineSub(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowRoutineSub not implemented")
}
func (*UnimplementedFlowMasterServer) FlowRoutineList(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowRoutineList not implemented")
}
func (*UnimplementedFlowMasterServer) FlowCreate(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowCreate not implemented")
}
func (*UnimplementedFlowMasterServer) MstFlowRoutineStop(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MstFlowRoutineStop not implemented")
}
func (*UnimplementedFlowMasterServer) MstFlowRoutineStart(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MstFlowRoutineStart not implemented")
}

func RegisterFlowMasterServer(s *grpc.Server, srv FlowMasterServer) {
	s.RegisterService(&_FlowMaster_serviceDesc, srv)
}

func _FlowMaster_DoCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).DoCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/DoCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).DoCmd(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMaster_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMaster_JobStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).JobStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/JobStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).JobStart(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMaster_JobStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).JobStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/JobStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).JobStop(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMaster_JobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).JobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/JobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).JobStatus(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMaster_JobExecuter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).JobExecuter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/JobExecuter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).JobExecuter(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMaster_FlowStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).FlowStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/FlowStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).FlowStart(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMaster_FlowStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).FlowStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/FlowStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).FlowStop(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMaster_FlowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).FlowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/FlowStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).FlowStatus(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMaster_FlowRoutineAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).FlowRoutineAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/FlowRoutineAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).FlowRoutineAdd(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMaster_FlowRoutineSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).FlowRoutineSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/FlowRoutineSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).FlowRoutineSub(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMaster_FlowRoutineList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).FlowRoutineList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/FlowRoutineList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).FlowRoutineList(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMaster_FlowCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).FlowCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/FlowCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).FlowCreate(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMaster_MstFlowRoutineStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).MstFlowRoutineStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/MstFlowRoutineStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).MstFlowRoutineStop(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowMaster_MstFlowRoutineStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowMasterServer).MstFlowRoutineStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.FlowMaster/MstFlowRoutineStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowMasterServer).MstFlowRoutineStart(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlowMaster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gproto.FlowMaster",
	HandlerType: (*FlowMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoCmd",
			Handler:    _FlowMaster_DoCmd_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _FlowMaster_Ping_Handler,
		},
		{
			MethodName: "JobStart",
			Handler:    _FlowMaster_JobStart_Handler,
		},
		{
			MethodName: "JobStop",
			Handler:    _FlowMaster_JobStop_Handler,
		},
		{
			MethodName: "JobStatus",
			Handler:    _FlowMaster_JobStatus_Handler,
		},
		{
			MethodName: "JobExecuter",
			Handler:    _FlowMaster_JobExecuter_Handler,
		},
		{
			MethodName: "FlowStart",
			Handler:    _FlowMaster_FlowStart_Handler,
		},
		{
			MethodName: "FlowStop",
			Handler:    _FlowMaster_FlowStop_Handler,
		},
		{
			MethodName: "FlowStatus",
			Handler:    _FlowMaster_FlowStatus_Handler,
		},
		{
			MethodName: "FlowRoutineAdd",
			Handler:    _FlowMaster_FlowRoutineAdd_Handler,
		},
		{
			MethodName: "FlowRoutineSub",
			Handler:    _FlowMaster_FlowRoutineSub_Handler,
		},
		{
			MethodName: "FlowRoutineList",
			Handler:    _FlowMaster_FlowRoutineList_Handler,
		},
		{
			MethodName: "FlowCreate",
			Handler:    _FlowMaster_FlowCreate_Handler,
		},
		{
			MethodName: "MstFlowRoutineStop",
			Handler:    _FlowMaster_MstFlowRoutineStop_Handler,
		},
		{
			MethodName: "MstFlowRoutineStart",
			Handler:    _FlowMaster_MstFlowRoutineStart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tmp/autoFlow.proto",
}

// SlaverClient is the client API for Slaver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SlaverClient interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	DoCmd(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	JobStatus(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type slaverClient struct {
	cc grpc.ClientConnInterface
}

func NewSlaverClient(cc grpc.ClientConnInterface) SlaverClient {
	return &slaverClient{cc}
}

func (c *slaverClient) DoCmd(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Slaver/DoCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaverClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Slaver/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaverClient) JobStart(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Slaver/JobStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaverClient) JobStop(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Slaver/JobStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaverClient) JobStatus(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/gproto.Slaver/JobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlaverServer is the server API for Slaver service.
type SlaverServer interface {
	// 定义接口 (结构体可以复用)
	// 方法 (请求消息结构体) returns (返回消息结构体) {}
	DoCmd(context.Context, *Req) (*Res, error)
	Ping(context.Context, *Req) (*Res, error)
	JobStart(context.Context, *Req) (*Res, error)
	JobStop(context.Context, *Req) (*Res, error)
	JobStatus(context.Context, *Req) (*Res, error)
}

// UnimplementedSlaverServer can be embedded to have forward compatible implementations.
type UnimplementedSlaverServer struct {
}

func (*UnimplementedSlaverServer) DoCmd(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCmd not implemented")
}
func (*UnimplementedSlaverServer) Ping(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedSlaverServer) JobStart(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStart not implemented")
}
func (*UnimplementedSlaverServer) JobStop(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStop not implemented")
}
func (*UnimplementedSlaverServer) JobStatus(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStatus not implemented")
}

func RegisterSlaverServer(s *grpc.Server, srv SlaverServer) {
	s.RegisterService(&_Slaver_serviceDesc, srv)
}

func _Slaver_DoCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaverServer).DoCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Slaver/DoCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaverServer).DoCmd(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slaver_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaverServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Slaver/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaverServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slaver_JobStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaverServer).JobStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Slaver/JobStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaverServer).JobStart(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slaver_JobStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaverServer).JobStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Slaver/JobStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaverServer).JobStop(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slaver_JobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaverServer).JobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproto.Slaver/JobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaverServer).JobStatus(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _Slaver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gproto.Slaver",
	HandlerType: (*SlaverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoCmd",
			Handler:    _Slaver_DoCmd_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Slaver_Ping_Handler,
		},
		{
			MethodName: "JobStart",
			Handler:    _Slaver_JobStart_Handler,
		},
		{
			MethodName: "JobStop",
			Handler:    _Slaver_JobStop_Handler,
		},
		{
			MethodName: "JobStatus",
			Handler:    _Slaver_JobStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tmp/autoFlow.proto",
}
